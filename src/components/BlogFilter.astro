---
import { getCollection } from 'astro:content';
import SkillTag from './SkillTag.astro';

export interface Props {
  selectedTag?: string;
  showFeaturedOnly?: boolean;
}

const { selectedTag, showFeaturedOnly = false } = Astro.props;

// Get all blog posts to extract available tags
const allPosts = await getCollection('blog');
const publishedPosts = allPosts.filter(post => !post.data.draft);

// Extract all unique tags and sort them
const allTags = [...new Set(publishedPosts.flatMap(post => post.data.tags))].sort();

// Get current URL for building filter links
const currentUrl = new URL(Astro.request.url);
const searchParams = new URLSearchParams(currentUrl.search);
---

<div class="mb-8 space-y-4" role="region" aria-label="Blog post filters">
  <!-- Filter Controls -->
  <div class="flex flex-wrap items-center justify-between gap-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Filter Posts</h3>
    
    <!-- Clear Filters -->
    {(selectedTag || showFeaturedOnly) && (
      <a 
        href="/blog/" 
        class="text-sm text-brand-600 dark:text-brand-400 hover:text-brand-700 dark:hover:text-brand-300 transition-colors"
        aria-label="Clear all filters"
      >
        Clear all filters
      </a>
    )}
  </div>

  <!-- Featured Filter -->
  <div class="flex items-center gap-4">
    <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Show:</span>
    <div class="flex gap-2">
      <a 
        href="/blog/" 
        class={`px-3 py-1 text-sm rounded-full transition-colors ${
          !showFeaturedOnly 
            ? 'bg-brand-600 text-white' 
            : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
        }`}
        aria-current={!showFeaturedOnly ? 'page' : undefined}
      >
        All Posts
      </a>
      <a 
        href={`/blog/?featured=true${selectedTag ? `&tag=${selectedTag}` : ''}`}
        class={`px-3 py-1 text-sm rounded-full transition-colors ${
          showFeaturedOnly 
            ? 'bg-brand-600 text-white' 
            : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
        }`}
        aria-current={showFeaturedOnly ? 'page' : undefined}
      >
        Featured Only
      </a>
    </div>
  </div>

  <!-- Tag Filters -->
  {allTags.length > 0 && (
    <div class="space-y-2">
      <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Filter by topic:</span>
      <div class="flex flex-wrap gap-2" role="list">
        {allTags.map((tag) => {
          const isSelected = selectedTag === tag;
          const href = isSelected 
            ? `/blog/${showFeaturedOnly ? '?featured=true' : ''}` 
            : `/blog/?tag=${encodeURIComponent(tag)}${showFeaturedOnly ? '&featured=true' : ''}`;
          
          return (
            <div role="listitem">
              <SkillTag 
                size="sm" 
                color={isSelected ? 'brand' : 'gray'} 
                href={href}
              >
                {tag}
              </SkillTag>
            </div>
          );
        })}
      </div>
    </div>
  )}
</div>

<script>
// Add accessibility features for filter interactions
document.addEventListener('DOMContentLoaded', function() {
  // Announce filter changes to screen readers
  const filterLinks = document.querySelectorAll('[aria-current="page"]');
  filterLinks.forEach(link => {
    link.addEventListener('click', function() {
      // Create a live region announcement
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = `Filter applied: ${link.textContent}`;
      document.body.appendChild(announcement);
      
      // Remove announcement after screen reader has processed it
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    });
  });
});
</script>

<style>
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
</style>